#!/usr/bin/python

import os
import string
import sys

import eyeD3
from vendor.pyat import pyat

get_fields = ('artist', 'album', 'title')
display_fields = ('artist', 'album', 'title')

def get_songs_from_files(files, fields):
  """Yield dictionaries of song data for a list of files"""
  tag = eyeD3.Tag()
  formatter = lambda field: 'get%s' % string.capwords(field)
  for filename in files:
    if not filename.endswith('.mp3'): continue
    tag.link(filename)
    song = dict(filename=filename, shortfilename=os.path.basename(filename))
    song.update(
       dict((
        field,
        getattr(tag, formatter(field))()
        ) for field in fields
      )
    )
    yield song

def get_operations():
  """Very rudimentary argv parser"""
  fieldset = dict()
  for arg in sys.argv[2:]:
    if arg.startswith('--'):
      field, value = arg[2:].split('=')
      if field in get_fields:
        fieldset[field] = value
  return fieldset

def set_fields(fields, infile):
  tag = eyeD3.Tag()
  tag.link(infile)
  tag.header.setVersion(eyeD3.ID3_V2_3)
  for field in get_fields:
    if field in fields:
      getattr(tag, 'set' + string.capwords(field))(fields[field])
  tag.update()

if __name__ == '__main__':
  if len(sys.argv) < 2:
    infile = './'
    print "No input specified, using current directory"
  else:
    infile = sys.argv[1]
    if not os.path.exists(infile):
      raise RuntimeError('Input file "%s" does not exist' % infile)

  if os.path.isdir(infile):
    print "Loading directory '%s'" % infile
    files = [infile + f for f in os.listdir(infile)]
    filefilter = lambda f: os.path.isfile(f) and f.endswith('.mp3')
    files = [f for f in files if filefilter(f)]
  elif os.path.isfile(infile):
    print "File '%s' specified" % infile
    files = [infile]
  else:
    raise RuntimeError("Didn't know how to open file: %s" % infile)

  songs = list(get_songs_from_files(files, get_fields))
  print songs
  print pyat.format(songs, display_fields)

  operations = get_operations()
  print "Operations to perform: %s" % operations
  if operations:
    for file in files:
      set_fields(operations, file)

  songs = list(get_songs_from_files(files, get_fields))
  print pyat.format(songs, display_fields)


